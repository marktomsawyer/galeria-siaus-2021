var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var React = require("react");
var core_1 = require("../../../../core");
var map = require("lodash/map");
var ViewItemComponent = function (props) {
    return (React.createElement(core_1.FastClick, {"handler": props.setView}, React.createElement("div", {"className": props.bemBlocks.container("action").state({ active: props.isActive })}, props.view)));
};
var ViewSwitcherToggle = (function (_super) {
    __extends(ViewSwitcherToggle, _super);
    function ViewSwitcherToggle() {
        _super.apply(this, arguments);
    }
    ViewSwitcherToggle.prototype.defineBEMBlocks = function () {
        return {
            container: this.props.mod || "sk-view-switcher"
        };
    };
    ViewSwitcherToggle.prototype.getViewOptionsSwitcherAccessor = function () {
        return this.searchkit.getAccessorByType(core_1.ViewOptionsAccessor);
    };
    ViewSwitcherToggle.prototype.setView = function (view) {
        this.getViewOptionsSwitcherAccessor().setView(view);
    };
    ViewSwitcherToggle.prototype.render = function () {
        var _this = this;
        var viewOptionsAccessor = this.getViewOptionsSwitcherAccessor();
        if (viewOptionsAccessor) {
            var options = viewOptionsAccessor.options;
            var selectedOption = viewOptionsAccessor.getSelectedOption();
            var actions = map(options, function (option) {
                return React.createElement(ViewItemComponent, {
                    view: option.title,
                    setView: function () { return _this.setView(option); },
                    bemBlocks: _this.bemBlocks,
                    key: option.key,
                    isActive: option == selectedOption
                });
            });
            return (React.createElement("div", {"className": this.bemBlocks.container().state({ disabled: !this.hasHits() })}, actions));
        }
        return null;
    };
    return ViewSwitcherToggle;
})(core_1.SearchkitComponent);
exports.ViewSwitcherToggle = ViewSwitcherToggle;
//# sourceMappingURL=ViewSwitcherToggle.js.map