var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var React = require("react");
var core_1 = require("../../../../core");
var defaults = require("lodash/defaults");
var get = require("lodash/get");
var assign = require("lodash/assign");
var map = require("lodash/map");
// export enum DIRECTION {
//  NEXT,
//  PREVIOUS
// }
function generatePages(currentPage, totalPages, options) {
    if (!options)
        options = {};
    var pageScope = options.pageScope == undefined ? 3 : options.pageScope;
    var pages = [];
    if (currentPage > pageScope + 1)
        pages.push({ type: "number", page: 1 });
    if (currentPage > pageScope + 2)
        pages.push({ type: "ellipsis" });
    if (currentPage > 1) {
        var min = Math.max(1, currentPage - pageScope);
        for (var i = min; i < currentPage; i++)
            pages.push({ type: "number", page: i });
    }
    pages.push({ type: "number", page: currentPage, active: true });
    if (currentPage < totalPages) {
        var max = Math.min(currentPage + pageScope, totalPages);
        for (var i = currentPage + 1; i <= max; i++)
            pages.push({ type: "number", page: i });
    }
    if (currentPage < totalPages - pageScope)
        pages.push({ type: "ellipsis" });
    return pages;
}
exports.generatePages = generatePages;
var PaginationDisplay = (function (_super) {
    __extends(PaginationDisplay, _super);
    function PaginationDisplay() {
        _super.apply(this, arguments);
    }
    PaginationDisplay.prototype.isDisabled = function (pageNumber) {
        return (pageNumber < 1) || (pageNumber > this.props.totalPages);
    };
    PaginationDisplay.prototype.getPages = function () {
        var _a = this.props, showNumbers = _a.showNumbers, currentPage = _a.currentPage, totalPages = _a.totalPages, pageScope = _a.pageScope;
        if (!showNumbers)
            return [];
        return generatePages(currentPage, totalPages, { pageScope: pageScope });
    };
    PaginationDisplay.prototype.render = function () {
        var _this = this;
        var _a = this.props, showNumbers = _a.showNumbers, currentPage = _a.currentPage, pageScope = _a.pageScope, bemBlocks = _a.bemBlocks, totalPages = _a.totalPages;
        var className = bemBlocks.container().state({
            numbered: this.props.showNumbers,
            disabled: totalPages == 1
        });
        // Renders numbers for pages, like "1, ..., 3, 4, 5, 6, 7, ..."
        return (React.createElement("div", {"className": className, "data-qa": "pagination"}, this.renderPaginationElement(currentPage - 1, "prev", "pagination.previous"), this.getPages().map(function (_a, idx) {
            var type = _a.type, page = _a.page;
            if (type == "ellipsis")
                return _this.renderEllipsis(idx);
            else
                return _this.renderPaginationElement(page, "number");
        }), this.renderPaginationElement(currentPage + 1, "next", "pagination.next")));
    };
    PaginationDisplay.prototype.renderEllipsis = function (key) {
        var _a = this.props, showNumbers = _a.showNumbers, bemBlocks = _a.bemBlocks;
        if (!showNumbers)
            return undefined;
        var className = bemBlocks.option()
            .mix(bemBlocks.container("item"))
            .mix(bemBlocks.option("number"))
            .state({
            disabled: true
        });
        return (React.createElement("div", {"key": "ellipsis-" + key, "className": className}, React.createElement("div", {"className": bemBlocks.option("text")}, "...")));
    };
    PaginationDisplay.prototype.renderPaginationElement = function (pageNumber, cssClass, text) {
        var _a = this.props, showNumbers = _a.showNumbers, currentPage = _a.currentPage, bemBlocks = _a.bemBlocks, translate = _a.translate, setPage = _a.setPage, urlBuilder = _a.urlBuilder;
        // Block numbers ?
        if (!showNumbers && (cssClass == "number"))
            return undefined;
        var disabled = this.isDisabled(pageNumber);
        var className = bemBlocks.option()
            .mix(bemBlocks.container("item"))
            .mix(bemBlocks.option(cssClass))
            .state({
            active: (pageNumber === currentPage),
            disabled: disabled
        });
        //  data-q={displayText}
        // previous/next or page number ?
        var displayText = text ? translate(text) : ("" + pageNumber);
        if (disabled) {
            return (React.createElement("div", {"key": "page-" + displayText, "className": className}, React.createElement("div", {"className": bemBlocks.option("text")}, displayText)));
        }
        else {
            return (React.createElement(core_1.FastClick, {"key": "page-" + displayText, "handler": function () { return setPage(pageNumber); }}, React.createElement("a", {"className": className, "href": urlBuilder(pageNumber)}, React.createElement("div", {"className": bemBlocks.option("text")}, displayText))));
        }
    };
    PaginationDisplay.propTypes = {
        currentPage: React.PropTypes.number.isRequired,
        totalPages: React.PropTypes.number.isRequired,
        urlBuilder: React.PropTypes.func.isRequired,
        showNumbers: React.PropTypes.bool,
        pageScope: React.PropTypes.number,
        setPage: React.PropTypes.func,
    };
    PaginationDisplay.defaultProps = {
        showNumbers: false,
        pageScope: 3
    };
    PaginationDisplay = __decorate([
        core_1.PureRender, 
        __metadata('design:paramtypes', [])
    ], PaginationDisplay);
    return PaginationDisplay;
})(React.Component);
exports.PaginationDisplay = PaginationDisplay;
var Pagination = (function (_super) {
    __extends(Pagination, _super);
    function Pagination() {
        _super.apply(this, arguments);
        this.translations = Pagination.translations;
    }
    Pagination.prototype.defineAccessor = function () {
        return new core_1.PaginationAccessor("p");
    };
    Pagination.prototype.defineBEMBlocks = function () {
        var block = (this.props.mod || "sk-pagination-navigation");
        return {
            container: block,
            option: block + "-item"
        };
    };
    Pagination.prototype.getCurrentPage = function () {
        return Number(this.accessor.state.getValue()) || 1;
    };
    Pagination.prototype.getTotalPages = function () {
        return Math.ceil(get(this.getResults(), ".hits.total", 1)
            /
                get(this.getQuery(), "query.size", 10));
    };
    Pagination.prototype.isDisabled = function (pageNumber) {
        return (pageNumber < 1) || (pageNumber > this.getTotalPages());
    };
    Pagination.prototype.setPage = function (pageNumber) {
        if (this.isDisabled(pageNumber)) {
            return;
        }
        ;
        if (pageNumber == this.getCurrentPage()) {
            return; // Same page, no need to rerun query
        }
        this.accessor.state = this.accessor.state.setValue(pageNumber);
        this.searchkit.performSearch();
    };
    Pagination.prototype.render = function () {
        if (!this.hasHits())
            return null;
        var _a = this.props, showNumbers = _a.showNumbers, pageScope = _a.pageScope;
        return React.createElement(PaginationDisplay, {"currentPage": this.getCurrentPage(), "totalPages": this.getTotalPages(), "showNumbers": showNumbers, "pageScope": pageScope, "bemBlocks": this.bemBlocks, "translate": this.translate.bind(this), "urlBuilder": this.accessor.urlWithState, "setPage": this.setPage.bind(this)});
    };
    Pagination.translations = {
        "pagination.previous": "Previous",
        "pagination.next": "Next"
    };
    Pagination.propTypes = defaults({
        translations: core_1.SearchkitComponent.translationsPropType(Pagination.translations),
        showNumbers: React.PropTypes.bool
    }, core_1.SearchkitComponent.propTypes);
    return Pagination;
})(core_1.SearchkitComponent);
exports.Pagination = Pagination;
//# sourceMappingURL=Pagination.js.map