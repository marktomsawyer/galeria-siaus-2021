var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var React = require("react");
var core_1 = require("../../../../../core");
var FilterItem_1 = require("../../filter-item/src/FilterItem");
var defaults = require("lodash/defaults");
var map = require("lodash/map");
var isNumber = require("lodash/isNumber");
var RefinementListFilterDisplay = (function (_super) {
    __extends(RefinementListFilterDisplay, _super);
    function RefinementListFilterDisplay() {
        _super.apply(this, arguments);
    }
    RefinementListFilterDisplay.prototype.hasOptions = function () {
        return this.props.buckets.length != 0;
    };
    RefinementListFilterDisplay.prototype.render = function () {
        var _a = this.props, id = _a.id, title = _a.title, bemBlocks = _a.bemBlocks, buckets = _a.buckets;
        var block = bemBlocks.container;
        var className = block()
            .mix("filter--" + id)
            .state({
            disabled: !this.hasOptions()
        });
        return (React.createElement("div", {"data-qa": "filter--" + this.props.id, "className": className}, React.createElement("div", {"data-qa": "header", "className": block("header")}, title), React.createElement("div", {"data-qa": "options", "className": block("options")}, map(buckets, this.renderOption.bind(this))), this.renderShowMore()));
    };
    RefinementListFilterDisplay.prototype.renderOption = function (option) {
        var _a = this.props, itemComponent = _a.itemComponent, bemBlocks = _a.bemBlocks, state = _a.state, toggleFilter = _a.toggleFilter, translate = _a.translate;
        return React.createElement(itemComponent, {
            key: option.key,
            label: translate(option.key),
            count: option.doc_count,
            selected: state.contains(option.key),
            translate: translate,
            bemBlocks: bemBlocks,
            toggleFilter: function () { return toggleFilter(option.key); }
        });
    };
    RefinementListFilterDisplay.prototype.renderShowMore = function () {
        var _a = this.props, bemBlocks = _a.bemBlocks, moreSizeOption = _a.moreSizeOption, toggleViewMoreOption = _a.toggleViewMoreOption, translate = _a.translate;
        var option = moreSizeOption;
        if (!option) {
            return null;
        }
        return (React.createElement(core_1.FastClick, {"handler": function () { return toggleViewMoreOption(option); }}, React.createElement("div", {"data-qa": "show-more", "className": bemBlocks.container("view-more-action")}, translate(option.label))));
    };
    RefinementListFilterDisplay.defaultProps = {
        itemComponent: FilterItem_1.FilterCheckboxItemComponent
    };
    RefinementListFilterDisplay = __decorate([
        core_1.PureRender, 
        __metadata('design:paramtypes', [])
    ], RefinementListFilterDisplay);
    return RefinementListFilterDisplay;
})(React.Component);
exports.RefinementListFilterDisplay = RefinementListFilterDisplay;
var RefinementListFilter = (function (_super) {
    __extends(RefinementListFilter, _super);
    function RefinementListFilter() {
        _super.apply(this, arguments);
    }
    RefinementListFilter.prototype.defineAccessor = function () {
        var _a = this.props, field = _a.field, id = _a.id, operator = _a.operator, title = _a.title, _b = _a.size, size = _b === void 0 ? 50 : _b, translations = _a.translations, orderKey = _a.orderKey, orderDirection = _a.orderDirection;
        return new core_1.FacetAccessor(field, {
            id: id, operator: operator, title: title, size: size,
            translations: translations, orderKey: orderKey, orderDirection: orderDirection
        });
    };
    RefinementListFilter.prototype.defineBEMBlocks = function () {
        var blockName = this.props.mod || "sk-refinement-list";
        return {
            container: blockName,
            option: blockName + "-option"
        };
    };
    RefinementListFilter.prototype.toggleFilter = function (key) {
        this.accessor.state = this.accessor.state.toggle(key);
        this.searchkit.performSearch();
    };
    RefinementListFilter.prototype.toggleViewMoreOption = function (option) {
        this.accessor.setViewMoreOption(option);
        this.searchkit.performSearch();
    };
    RefinementListFilter.prototype.render = function () {
        var _a = this.props, id = _a.id, title = _a.title, component = _a.component, itemComponent = _a.itemComponent;
        return React.createElement(component, {
            id: id,
            title: title,
            itemComponent: itemComponent,
            bemBlocks: this.bemBlocks,
            buckets: this.accessor.getBuckets(),
            toggleFilter: this.toggleFilter.bind(this),
            moreSizeOption: this.accessor.getMoreSizeOption(),
            toggleViewMoreOption: this.toggleViewMoreOption.bind(this),
            translate: this.translate,
            state: this.accessor.state
        });
    };
    RefinementListFilter.propTypes = defaults({
        field: React.PropTypes.string.isRequired,
        operator: React.PropTypes.oneOf(["AND", "OR"]),
        size: React.PropTypes.number,
        title: React.PropTypes.string.isRequired,
        id: React.PropTypes.string.isRequired,
        translations: core_1.SearchkitComponent.translationsPropType(core_1.FacetAccessor.translations),
        orderKey: React.PropTypes.string,
        orderDirection: React.PropTypes.oneOf(["asc", "desc"])
    }, core_1.SearchkitComponent.propTypes);
    RefinementListFilter.defaultProps = {
        component: RefinementListFilterDisplay,
        itemComponent: FilterItem_1.FilterCheckboxItemComponent
    };
    return RefinementListFilter;
})(core_1.SearchkitComponent);
exports.RefinementListFilter = RefinementListFilter;
//# sourceMappingURL=RefinementListFilter.js.map