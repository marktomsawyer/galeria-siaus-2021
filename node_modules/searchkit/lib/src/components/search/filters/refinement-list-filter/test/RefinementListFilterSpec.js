var _this = this;
var React = require("react");
var enzyme_1 = require("enzyme");
var TestHelpers_1 = require("../../../../__test__/TestHelpers");
var RefinementListFilter_tsx_1 = require("../src/RefinementListFilter.tsx");
var core_1 = require("../../../../../core");
var bem = require("bem-cn");
var _ = require("lodash");
var sinon = require("sinon");
describe("Refinement List Filter tests", function () {
    _this.createWrapper = function (component) {
        _this.wrapper = enzyme_1.mount(component);
        _this.searchkit.setResults({
            aggregations: {
                test1: {
                    test: {
                        buckets: [
                            { key: "test option 1", doc_count: 1 },
                            { key: "test option 2", doc_count: 2 },
                            { key: "test option 3", doc_count: 3 }
                        ]
                    },
                    "test_count": {
                        value: 4
                    }
                }
            }
        });
        _this.accessor = _this.searchkit.accessors.getAccessors()[0];
        _this.getContainer = function (label, index) {
            var container = _this.wrapper.find("." + _this.bemContainer(label));
            if (_.isNumber(index)) {
                return container.children().at(index);
            }
            else {
                return container;
            }
        };
    };
    beforeEach(function () {
        core_1.Utils.guidCounter = 0;
        _this.bemContainer = bem("sk-refinement-list");
        _this.bemOption = bem("sk-refinement-list-option");
        _this.searchkit = core_1.SearchkitManager.mock();
        _this.searchkit.translateFunction = function (key) {
            return {
                "test option 1": "test option 1 translated"
            }[key];
        };
        _this.createWrapper(React.createElement(RefinementListFilter_tsx_1.RefinementListFilter, {"field": "test", "id": "test id", "title": "test title", "size": 3, "searchkit": _this.searchkit}));
    });
    it('renders correctly', function () {
        var output = TestHelpers_1.jsxToHTML(React.createElement("div", {"data-qa": "filter--test id", "className": "sk-refinement-list filter--test id"}, React.createElement("div", {"data-qa": "header", "className": "sk-refinement-list__header"}, "test title"), React.createElement("div", {"data-qa": "options", "className": "sk-refinement-list__options"}, React.createElement("div", {"className": "sk-refinement-list-option sk-refinement-list__item", "data-qa": "option"}, React.createElement("input", {"type": "checkbox", "data-qa": "checkbox", "readOnly": true, "className": "sk-refinement-list-option__checkbox"}), React.createElement("div", {"data-qa": "label", "className": "sk-refinement-list-option__text"}, "test option 1 translated"), React.createElement("div", {"data-qa": "count", "className": "sk-refinement-list-option__count"}, "1")), React.createElement("div", {"className": "sk-refinement-list-option sk-refinement-list__item", "data-qa": "option"}, React.createElement("input", {"type": "checkbox", "data-qa": "checkbox", "readOnly": true, "className": "sk-refinement-list-option__checkbox"}), React.createElement("div", {"data-qa": "label", "className": "sk-refinement-list-option__text"}, "test option 2"), React.createElement("div", {"data-qa": "count", "className": "sk-refinement-list-option__count"}, "2")), React.createElement("div", {"className": "sk-refinement-list-option sk-refinement-list__item", "data-qa": "option"}, React.createElement("input", {"type": "checkbox", "data-qa": "checkbox", "readOnly": true, "className": "sk-refinement-list-option__checkbox"}), React.createElement("div", {"data-qa": "label", "className": "sk-refinement-list-option__text"}, "test option 3"), React.createElement("div", {"data-qa": "count", "className": "sk-refinement-list-option__count"}, "3"))), React.createElement("div", {"data-qa": "show-more", "className": "sk-refinement-list__view-more-action"}, "View all"))).replace(/__checkbox"\/>/g, "__checkbox\">");
        // replacing cause jsdom html() not closing input tag
        expect(_this.wrapper.html()).toEqual(output);
    });
    it('clicks options', function () {
        var option = _this.getContainer("options", 0).children().at(0);
        var option2 = _this.getContainer("options", 1).children().at(0);
        TestHelpers_1.fastClick(option);
        TestHelpers_1.fastClick(option2);
        expect(TestHelpers_1.hasClass(option, "is-selected")).toBe(true);
        expect(TestHelpers_1.hasClass(option2, "is-selected")).toBe(true);
        expect(_this.accessor.state.getValue()).toEqual(['test option 1', 'test option 2']);
        TestHelpers_1.fastClick(option2);
        _this.wrapper.update();
        expect(_this.accessor.state.getValue()).toEqual(['test option 1']);
    });
    it("show more options", function () {
        var option = { label: "view more", size: 20 };
        _this.accessor.getMoreSizeOption = function () { return option; };
        _this.accessor.setViewMoreOption = sinon.spy();
        _this.wrapper.update();
        expect(_this.getContainer("view-more-action").text()).toBe("view more");
        TestHelpers_1.fastClick(_this.getContainer("view-more-action"));
        _this.wrapper.update();
        expect(_this.accessor.setViewMoreOption.calledOnce).toBe(true);
        expect(_this.accessor.setViewMoreOption.calledWith(option)).toBe(true);
    });
    it("show no options", function () {
        _this.accessor.getMoreSizeOption = function () { return null; };
        _this.wrapper.update();
        expect(_this.getContainer("sk-view-more-action").length).toBe(0);
    });
    it("should configure accessor correctly", function () {
        expect(_this.accessor.key).toBe("test");
        var options = _this.accessor.options;
        expect(options).toEqual({
            "id": "test id",
            "title": "test title",
            "size": 3,
            "facetsPerPage": 50,
            "operator": undefined,
            "translations": undefined,
            "orderKey": undefined,
            "orderDirection": undefined
        });
    });
    it("should work with a custom itemComponent", function () {
        _this.createWrapper(React.createElement(RefinementListFilter_tsx_1.RefinementListFilter, {"itemComponent": function (_a) {
            var label = _a.label, count = _a.count;
            return React.createElement("div", {"className": "option"}, label, " (", count, ")");
        }, "field": "test", "id": "test id", "title": "test title", "searchkit": _this.searchkit}));
        expect(_this.getContainer("header").text()).toBe("test title");
        expect(_this.getContainer("options").find(".option").map(function (e) { return e.text(); }))
            .toEqual(["test option 1 translated (1)", "test option 2 (2)", "test option 3 (3)"]);
    });
    it("should work with a custom component", function () {
        _this.createWrapper(React.createElement(RefinementListFilter_tsx_1.RefinementListFilter, {"component": function (_a) {
            var title = _a.title, buckets = _a.buckets;
            return (React.createElement("div", null, React.createElement("div", {"className": "header"}, title), React.createElement("div", {"className": "options"}, buckets.map(function (_a) {
                var key = _a.key, doc_count = _a.doc_count;
                return React.createElement("div", {"key": key, "className": "option"}, key, " (", doc_count, ")");
            }))));
        }, "field": "test", "id": "test id", "title": "test title", "searchkit": _this.searchkit}));
        expect(_this.wrapper.find(".header").text()).toBe("test title");
        expect(_this.wrapper.find(".option").map(function (e) { return e.text(); }))
            .toEqual(["test option 1 (1)", "test option 2 (2)", "test option 3 (3)"]);
    });
});
//# sourceMappingURL=RefinementListFilterSpec.js.map