var _this = this;
var React = require("react");
var enzyme_1 = require("enzyme");
var FilterItem_1 = require("../src/FilterItem");
var TestHelpers_1 = require("../../../../__test__/TestHelpers");
var sinon = require("sinon");
var bem = require("bem-cn");
var _ = require("lodash");
describe("FilterItem", function () {
    it("FilterItemComponent", function () {
        var spy = sinon.spy();
        var createRender = function (overrideProps) {
            if (overrideProps === void 0) { overrideProps = {}; }
            var props = _.extend({
                bemBlocks: {
                    container: bem("container"),
                    option: bem("option")
                },
                toggleFilter: spy,
                translate: function () { },
                selected: true,
                label: "test",
                count: 1
            }, overrideProps);
            _this.wrapper = enzyme_1.mount(React.createElement(FilterItem_1.FilterItemComponent, React.__spread({}, props)));
        };
        createRender();
        expect(_this.wrapper.html()).toEqual(TestHelpers_1.jsxToHTML(React.createElement("div", {"className": "option container__item is-selected", "data-qa": "option"}, React.createElement("div", {"data-qa": "label", "className": "option__text"}, "test"), React.createElement("div", {"data-qa": "count", "className": "option__count"}, "1"))));
        createRender({ selected: false });
        expect(_this.wrapper.html()).toEqual(TestHelpers_1.jsxToHTML(React.createElement("div", {"className": "option container__item", "data-qa": "option"}, React.createElement("div", {"data-qa": "label", "className": "option__text"}, "test"), React.createElement("div", {"data-qa": "count", "className": "option__count"}, "1"))));
        expect(spy.called).toBe(false);
        TestHelpers_1.fastClick(_this.wrapper.find(".option"));
        _this.wrapper.update();
        expect(spy.calledOnce).toBe(true);
    });
    it("FilterItemCheckboxComponent", function () {
        var spy = sinon.spy();
        var createRender = function (overrideProps) {
            if (overrideProps === void 0) { overrideProps = {}; }
            var props = _.extend({
                bemBlocks: {
                    container: bem("container"),
                    option: bem("option")
                },
                toggleFilter: spy,
                translate: function () { },
                selected: true,
                label: "test",
                count: 1
            }, overrideProps);
            _this.wrapper = enzyme_1.mount(React.createElement(FilterItem_1.FilterCheckboxItemComponent, React.__spread({}, props)));
        };
        createRender();
        expect(_this.wrapper.html()).toEqual(TestHelpers_1.jsxToHTML(React.createElement("div", {"className": "option container__item is-selected", "data-qa": "option"}, React.createElement("input", {"type": "checkbox", "data-qa": "checkbox", "checked": true, "readOnly": true, "className": "option__checkbox is-selected"}), React.createElement("div", {"data-qa": "label", "className": "option__text"}, "test"), React.createElement("div", {"data-qa": "count", "className": "option__count"}, "1"))).replace(/is-selected"\/>/g, "is-selected\">"));
        createRender({ selected: false });
        expect(_this.wrapper.html()).toEqual(TestHelpers_1.jsxToHTML(React.createElement("div", {"className": "option container__item", "data-qa": "option"}, React.createElement("input", {"type": "checkbox", "data-qa": "checkbox", "readOnly": true, "className": "option__checkbox"}), React.createElement("div", {"data-qa": "label", "className": "option__text"}, "test"), React.createElement("div", {"data-qa": "count", "className": "option__count"}, "1"))).replace(/__checkbox"\/>/g, "__checkbox\">"));
        expect(spy.called).toBe(false);
        TestHelpers_1.fastClick(_this.wrapper.find(".option"));
        _this.wrapper.update();
        expect(spy.calledOnce).toBe(true);
    });
});
//# sourceMappingURL=FilterItemSpec.js.map