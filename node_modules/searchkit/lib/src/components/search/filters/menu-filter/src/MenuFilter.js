var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var React = require("react");
var core_1 = require("../../../../../core");
var FilterItem_1 = require("../../filter-item/src/FilterItem");
var defaults = require("lodash/defaults");
var map = require("lodash/map");
var MenuFilter = (function (_super) {
    __extends(MenuFilter, _super);
    function MenuFilter() {
        _super.apply(this, arguments);
    }
    MenuFilter.prototype.defineBEMBlocks = function () {
        var blockName = this.props.mod || "sk-menu-list";
        return {
            container: blockName,
            option: blockName + "-option"
        };
    };
    MenuFilter.prototype.defineAccessor = function () {
        var _a = this.props, field = _a.field, id = _a.id, _b = _a.size, size = _b === void 0 ? 50 : _b, title = _a.title, orderKey = _a.orderKey, orderDirection = _a.orderDirection;
        var operator = "OR";
        return new core_1.FacetAccessor(field, {
            id: id, operator: operator, title: title, size: size, orderKey: orderKey, orderDirection: orderDirection
        });
    };
    MenuFilter.prototype.addFilter = function (option) {
        if (option === "All" || this.accessor.state.contains(option)) {
            this.accessor.state = this.accessor.state.clear();
        }
        else {
            this.accessor.state = this.accessor.state.setValue([option]);
        }
        this.searchkit.performSearch();
    };
    MenuFilter.prototype.renderOption = function (key, count, isSelected) {
        return (React.createElement(this.props.itemComponent, {
            toggleFilter: this.addFilter.bind(this, key),
            bemBlocks: this.bemBlocks,
            label: this.translate(key),
            key: key,
            docCount: count,
            selected: isSelected,
            translate: this.translate
        }));
    };
    MenuFilter.prototype.createOption = function (option) {
        var isChecked = this.accessor.state.contains(option.key);
        return this.renderOption(option.key, option.doc_count, isChecked);
    };
    MenuFilter.prototype.render = function () {
        var _this = this;
        var block = this.bemBlocks.container;
        var className = block().mix("filter--" + this.props.id);
        var isAllChecked = function () {
            return !_this.accessor.state.getValue() || _this.accessor.state.getValue().length == 0;
        };
        return (React.createElement("div", {"className": className}, React.createElement("div", {"className": block("header")}, this.props.title), React.createElement("div", {"className": block("options")}, this.renderOption("All", null, isAllChecked()), map(this.accessor.getBuckets(), this.createOption.bind(this)))));
    };
    MenuFilter.propTypes = defaults({
        field: React.PropTypes.string.isRequired,
        title: React.PropTypes.string.isRequired,
        id: React.PropTypes.string.isRequired,
        size: React.PropTypes.number,
        orderKey: React.PropTypes.string,
        orderDirection: React.PropTypes.oneOf(["asc", "desc"]),
    }, core_1.SearchkitComponent.propTypes);
    MenuFilter.defaultProps = {
        itemComponent: FilterItem_1.FilterItemComponent
    };
    return MenuFilter;
})(core_1.SearchkitComponent);
exports.MenuFilter = MenuFilter;
//# sourceMappingURL=MenuFilter.js.map